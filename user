package rwtool.model;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;

// This class represents a USER in your database
// Think of it as a blueprint for how user data is stored

@Entity // This tells Spring: "This is a database table"
@Table(name = "users") // Table name in PostgreSQL will be "users"
@Data // Lombok: Auto-generates getters, setters, toString
@NoArgsConstructor // Creates empty constructor
@AllArgsConstructor // Creates constructor with all fields
public class User {
    
    @Id // This is the Primary Key (unique identifier)
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Auto-increment
    private Long id;
    
    @Column(nullable = false, unique = true) // Username must be unique
    private String username;
    
    @Column(nullable = false, unique = true) // Email must be unique
    private String email;
    
    @Column(nullable = false) // Password is required
    private String password; // Will be encrypted (hashed)
    
    @Column(name = "full_name")
    private String fullName;
    
    @Column(name = "phone_number")
    private String phoneNumber;
    
    @Enumerated(EnumType.STRING) // Store role as text (USER, ADMIN, OPS)
    @Column(nullable = false)
    private Role role; // USER, ADMIN, or OPS
    
    @Column(name = "is_active")
    private Boolean isActive = true; // Account active or not
    
    @CreationTimestamp // Automatically sets creation time
    @Column(name = "created_at", updatable = false)
    private LocalDateTime createdAt;
    
    @UpdateTimestamp // Automatically updates when modified
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;
}


package rwtool.model;

// This is an ENUM - a fixed set of constants
// Think of it like multiple choice: USER, ADMIN, or OPS only

public enum Role {
    USER,   // Regular user role
    ADMIN,  // Admin role (can manage users, reports, approvals)
    OPS     // Operations role (handles data syncing, storage)
}


package rwtool.repository;

import rwtool.model.Role;
import rwtool.model.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

// This is the DATABASE ACCESS LAYER
// It provides methods to interact with the "users" table
// Spring automatically implements these methods!

@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    
    // Find user by username
    // SQL equivalent: SELECT * FROM users WHERE username = ?
    Optional<User> findByUsername(String username);
    
    // Find user by email
    Optional<User> findByEmail(String email);
    
    // Find user by username AND role (important for role-specific login)
    // SQL: SELECT * FROM users WHERE username = ? AND role = ?
    Optional<User> findByUsernameAndRole(String username, Role role);
    
    // Find user by email AND role
    Optional<User> findByEmailAndRole(String email, Role role);
    
    // Check if username already exists (for signup validation)
    // Returns true/false
    Boolean existsByUsername(String username);
    
    // Check if email already exists
    Boolean existsByEmail(String email);
}

package rwtool.dto;

import rwtool.model.Role;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

// This is what frontend sends when user tries to LOGIN
// Example: { "username": "john", "password": "pass123", "role": "USER" }

@Data
@NoArgsConstructor
@AllArgsConstructor
public class LoginRequest {
    private String username;  // User enters username
    private String password;  // User enters password
    private Role role;        // Which login page? USER/ADMIN/OPS
}
