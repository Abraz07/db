const API_BASE_URL = 'http://localhost:8080/api/profile';

const profileService = {
  getProfile: async (email) => {
    const res = await fetch(`${API_BASE_URL}/${encodeURIComponent(email)}`);
    if (!res.ok) throw new Error('Failed to load profile');
    return res.json();
  },
  updateProfile: async (email, payload) => {
    const res = await fetch(`${API_BASE_URL}/${encodeURIComponent(email)}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    if (!res.ok) throw new Error('Failed to update profile');
    return res.json();
  },
  incrementDownloads: async (email, count = 1) => {
    const res = await fetch(`${API_BASE_URL}/${encodeURIComponent(email)}/downloads/increment?count=${count}`, {
      method: 'POST'
    });
    if (!res.ok) throw new Error('Failed to update downloads');
    return res.json();
  }
};

export default profileService;



import axios from 'axios';

const API_BASE_URL = 'http://localhost:8080/api/audit-logs';

const auditService = {
    /**
     * Get all audit logs (recent 100)
     */
    getAllLogs: async () => {
        const response = await axios.get(API_BASE_URL);
        return response.data;
    },

    /**
     * Get filtered audit logs
     * @param {Object} filters - { userRole, action, dateRange }
     */
    getFilteredLogs: async (filters = {}) => {
        const params = new URLSearchParams();
        if (filters.userRole) params.append('userRole', filters.userRole);
        if (filters.action) params.append('action', filters.action);
        if (filters.dateRange) params.append('dateRange', filters.dateRange);
        
        const response = await axios.get(`${API_BASE_URL}/filtered?${params.toString()}`);
        return response.data;
    },

    /**
     * Get logs by user email
     */
    getLogsByUser: async (email) => {
        const response = await axios.get(`${API_BASE_URL}/user/${encodeURIComponent(email)}`);
        return response.data;
    },

    /**
     * Get logs by action
     */
    getLogsByAction: async (action) => {
        const response = await axios.get(`${API_BASE_URL}/action/${encodeURIComponent(action)}`);
        return response.data;
    },

    /**
     * Get logs by role
     */
    getLogsByRole: async (role) => {
        const response = await axios.get(`${API_BASE_URL}/role/${encodeURIComponent(role)}`);
        return response.data;
    }
};

export default auditService;
